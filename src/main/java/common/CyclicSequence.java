package common;

import io.vavr.collection.List;

/**
 * A sequence of numbers that evolves into a cyclic sequence after an initial non-cyclic section.
 * Give enough numbers, this class can determine the cycle length and extrapolate the value
 * at any point in the future. 
 */
public class CyclicSequence {

    List<Integer> vals = List.empty();

    public void add(int n) {
        vals = vals.append(n);
    }

    // look for at least 3 repetitions of the tail
    public List<Integer> findCycles() {
        var l = vals.size() - 1;
        var r = List.range(1, l / 3)
                .filter(c -> vals.get(l).equals(vals.get(l - c)) && (vals.get(l).equals(vals.get(l - c - c))));
        var r1 = r.filter(x -> !r.exists(y -> (y < x) && (x % y == 0)));
        return r1;
    }

    public int extrapolate(long tgt, int cycleLen) {
        var l = vals.size();
        var r = tgt - l;
        int d = (int) (r % cycleLen);
        return vals.get(l - cycleLen + d - 1);
    }

    
    public static void main(String[] args) {
        
        var vals = List.of(100634, 100117, 99816, 99539, 99160, 98916, 98661, 98377, 98100, 97772, 97531, 97244, 97068,
                96863, 96736, 96595, 96431, 96286, 96155, 96027, 95904, 95800, 95741, 95678, 95638, 95605, 95583, 95542,
                95525, 95529, 95553, 95580, 95606, 95607, 95625, 95639, 95665, 95668, 95686, 95707, 95720, 95710, 95707,
                95694, 95684, 95674, 95668, 95659, 95644, 95599, 95576, 95544, 95531, 95527, 95549, 95557, 95562, 95563,
                95579, 95582, 95596, 95611, 95633, 95671, 95724, 95772, 95822, 95875, 95907, 95921, 95911, 95899, 95855,
                95835, 95798, 95751, 95693, 95638, 95573, 95497, 95442, 95384, 95311, 95241, 95173, 95108, 95028, 94949,
                94871, 94807, 94750, 94695, 94617, 94537, 94445, 94357, 94267, 94185, 94114, 94043, 93957, 93869, 93778,
                93690, 93615, 93540, 93463, 93394, 93317, 93241, 93167, 93097, 93024, 92943, 92864, 92791, 92716, 92647,
                92570, 92502, 92415, 92337, 92270, 92223, 92174, 92134, 92105, 92068, 92032, 91987, 91943, 91889, 91846,
                91781, 91720, 91660, 91615, 91572, 91533, 91499, 91454, 91431, 91383, 91326, 91276, 91223, 91154, 91078,
                91002, 90931, 90857, 90785, 90713, 90653, 90592, 90552, 90540, 90521, 90514, 90512, 90539, 90575, 90618,
                90671, 90733, 90802, 90871, 90928, 90975, 90997, 90991, 90998, 90987, 90968, 90940, 90906, 90850, 90780,
                90713, 90653, 90592, 90552, 90540, 90521, 90514, 90512, 90539, 90575, 90618, 90671, 90733, 90802, 90871,
                90928, 90975, 90997, 90991, 90998, 90987, 90968, 90940, 90906, 90850, 90780, 90713, 90653, 90592, 90552,
                90540, 90521, 90514, 90512, 90539, 90575, 90618, 90671, 90733, 90802, 90871, 90928, 90975, 90997, 90991,
                90998, 90987, 90968, 90940, 90906, 90850, 90780, 90713, 90653, 90592, 90552, 90540, 90521, 90514, 90512,
                90539, 90575, 90618, 90671, 90733, 90802, 90871, 90928, 90975, 90997, 90991, 90998, 90987, 90968, 90940,
                90906, 90850, 90780, 90713, 90653, 90592, 90552, 90540, 90521, 90514, 90512, 90539, 90575, 90618, 90671,
                90733, 90802, 90871, 90928, 90975, 90997, 90991, 90998, 90987, 90968, 90940, 90906, 90850, 90780, 90713,
                90653, 90592, 90552, 90540, 90521, 90514, 90512, 90539, 90575, 90618, 90671, 90733, 90802, 90871, 90928,
                90975);
        
        var s = new CyclicSequence();
        vals.forEach(s::add);
        var c = s.findCycles();
        System.out.println(c);
        var r = s.extrapolate(1000000000, c.head());
        System.out.println(r);
    }    

}
